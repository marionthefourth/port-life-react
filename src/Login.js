import React, { useState, useEffect } from 'react';import './Login.css';require("dotenv").config();export default function Login() {//  const [modalIsOpen, setIsOpen] = useState(false);//!! TODO: remove  const [QRCodeURL, setQRCodeURL] = useState('');  const [errorNotification, setErrorNotification] = useState('');  const [fullName, setFullName] = useState('');//!! TODO: remove//  function handleOpenModal(){//    setIsOpen(true);//  }////  function handleCloseModal(){//    setIsOpen(false);//  }  const verifyCredentials = async () => {    console.log("verifyCredentials()"); //!! TODO: remove    const options = {      method: 'PUT',      headers: {        Accept: 'text/plain',        Authorization: process.env.REACT_APP_ACCESSTOK      }    };    ///!!! DONT HAVE IT SEND VERIFICATION REQUESTS WILLY NILLY//       let response = await fetch('https://api.trinsic.id/credentials/v1/verifications/policy/' + process.env.REACT_APP_POLICY_ID,//       options)//         .then(response => response.json())//         //.then((response) => {return response.verificationRequestUrl;})//         .catch(err => console.error(err));//        setQRCodeURL(response.verificationRequestUrl);        setQRCodeURL("test");        //!!! TODO: START CHECKING VERIFICATION AFTER 10 SECONDS TO GIVE USER OPPORTUNITY TO SCAN QR CODE        let responseVerificationId = 40;        checkCredentials(responseVerificationId);//        checkCredentials(response.verificationId);    };  const checkCredentials = async (verificationId) => {    let verification = {state: "Requested"};    let responseError = false;    let timedOut = false;    await setTimeout(() => { timedOut = true }, 1000 * 60);    while (!timedOut && verification.state === "Requested" && !responseError) {      console.log("Checking verification"); //!! TODO: remove      const options = {        method: 'GET',        headers: {          Accept: 'text/plain',          Authorization: process.env.REACT_APP_ACCESSTOK        }      };      let response = await fetch('https://api.trinsic.id/credentials/v1/verifications/' + verificationId, options)        .then(response => response.json())        .catch(err => console.error(err));      if(response.error) {          console.error(response.error); //!! TODO: remove          setErrorNotification(response.error);          responseError = true;      } else {          console.log(response); //!! TODO: remove          //!!!!!! TO DO: SET A VERIFICATION STATE HERE INSTEAD?          verification =  response.data.verification;      }    }    // If verification did not complete after 1 min, set error message    if(timedOut && verification.state === "Requested" && !responseError) {      let errorMsg = "Request has timed out"      setErrorNotification(errorMsg);    }  }  const handleVerify = async e => {    e.preventDefault();    setErrorNotification();    await verifyCredentials();    //!!!!!! TODO: ONCE VERIFICATION IS SUCCESSFUL, REDIRECT USER TO PORT-LIFE?    //  /viewer    setFullName("Numra");//    const token = await loginUser({//      username,//      password//    });//    setToken(token);  }  //!!!!!! TODO: UPDATE WITH "WELCOME FULL NAME" MESSAGE?  return(    <div className="login-wrapper">      <h1>Verify Your Digital ID</h1>      <div>        <p>Initiate the verification process below. Scan the QR code with the <a href="https://trinsic.id/trinsic-wallet/"            target="_blank"            rel="noopener">Trinsic mobile wallet</a> and present a valid credential for verification.        </p>        <button className="btn btn-primary submit-button" onClick={handleVerify}>Click here to initiate verification process</button>      </div>      { QRCodeURL &&          <div><img src={'https://chart.googleapis.com/chart?cht=qr&chl=' + QRCodeURL + '&chs=300x300&chld=L|1'} /></div>      }      { errorNotification &&        <div className="error">ERROR: {errorNotification}</div>      }      { fullName && <div>Welcome {fullName}!</div>}    </div>  )}